{"version":3,"sources":["assets/GxP.png","components/Table/Table.js","App.js","index.js"],"names":["module","exports","Table","numbers","selectedCell","selectedStyle","backgroundColor","color","padding","nonSelectedStyle","map","row","index","key","element","val","style","isSelected","className","onClick","Array","from","length","v","k","App","setState","extractNumber","availableNumbers","flat","filter","el","Math","floor","random","extracted","colorChanged","event","target","value","state","this","type","onChange","alt","src","logo","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35111814.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GxP.f404f204.png\";","import React from 'react';\nimport './Table.css';\n\nfunction Table({ numbers, selectedCell, color }) {\n\n    const selectedStyle = { backgroundColor: color, color: \"white\", padding: \"10px\" };\n    const nonSelectedStyle = { backgroundColor: \"white\", color: \"black\", padding: \"10px\" };\n\n    return (\n\n        <table>\n            <tbody>\n                {numbers.map((row, index) =>\n                    <tr key={index}>\n                        {row.map(element =>\n                            <td key={element.val}\n                                style={element.isSelected ? selectedStyle : nonSelectedStyle}\n                                className=\"cell\"\n                                onClick={() => selectedCell(element)}>\n                                {element.val}\n                            </td>)\n                        }\n                    </tr>\n                )}\n            </tbody>\n        </table>\n\n    );\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Table from './components/Table/Table';\nimport logo from \"./assets/GxP.png\";\n\nconst numbers = [\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 10 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 20 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 30 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 40 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 50 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 60 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 70 + 1, isSelected: false }),\n  Array.from({ length: 10 }, (v, k) => k = { val: k + 1 * 80 + 1, isSelected: false })\n\n];\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      numbers: numbers,\n      extracted: \"00\",\n      color: \"#FF0000\"\n    }\n  }\n\n  selectedCell = (element) => {\n    element.isSelected = !element.isSelected;\n    this.setState({ numbers });\n  }\n\n  extractNumber = () => {\n\n    // Genero un array con solo gli elementi non ancora selezionati di numbers\n    const availableNumbers = numbers.flat().filter(el => !el.isSelected);\n\n    if (availableNumbers.length === 0) return;\n\n    // Scelgo casualmente un indice tra quelli dell'array appena selezionato ed estraggo l'elemento\n    // (Funziona perchè l'elemento estratto dal secondo array è lo stesso elemento del primo: il metodo\n    // flat() restituisce una copia dell'array, ma non una copia degli elementi in esso contenuti)\n    const index = Math.floor(Math.random() * availableNumbers.length);\n    const element = availableNumbers[index];\n\n    this.selectedCell(element);\n    this.setState({ extracted: element.val });\n  }\n\n  colorChanged = (event) => {\n    this.setState({ color: event.target.value });\n\n  }\n\n  render() {\n\n\n    return (\n      <div className=\"App\">\n        <div className=\"content-center\">\n          <h1>Tombola GxP</h1>\n          <Table\n            numbers={this.state.numbers}\n            selectedCell={this.selectedCell}\n            color={this.state.color} />\n          <div>\n            <button\n              onClick={this.extractNumber}>\n              Estrai\n            </button>\n            <input type=\"color\" onChange={this.colorChanged} />\n          </div>\n        </div>\n        <div>\n          <h2>Numero estratto:</h2><br />\n          <h1\n            className=\"extracted\">{this.state.extracted}</h1>\n            <img alt=\"logo\" src={logo}></img>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n"],"sourceRoot":""}