{"version":3,"sources":["Cell.js","Grid.js","tictac-ai.js","App.js","serviceWorker.js","index.js"],"names":["Cell","charToDisplay","bgcolor","clickedCell","value","id","className","onClick","Grid","winLoose","board","onclickMethod","replayBtnHandler","winner","background","showH1","COMPUTER","PLAYER","winningCombos","checkVictory","player","coveredByPlayer","getCoveredBy","filter","line","every","cell","includes","length","map","index","getAvailable","checkDraw","c","placeCircle","minimax","_board","av","score","moves","i","move","mm","push","bestMove","bestScore","slice","App","clickHandler","event","selected","target","setState","_winner","replay","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce3b1d36.chunk.js","sourcesContent":["import React from 'react';\nimport './Cell.css'\n/**\n * A cell only knows that when it gets clicked it has to trigger the handler,\n * write the received value to its content and change its background when the \n * Grid says to\n */\nconst Cell = ({ bgcolor, clickedCell, value, id }) => {\n\n    let charToDisplay;\n    if (value === 0) {\n        charToDisplay = '   ';\n    } else if (value === 'X') {\n        charToDisplay = ' X ';\n    } else {\n        charToDisplay = ' O ';\n    }\n    return (\n        <td className={`bg-${bgcolor} dim`} onClick={clickedCell} id={id}>{charToDisplay}</td>\n    );\n};\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\nimport './Grid.css';\n\n\nconst Grid = ({ board, onclickMethod, replayBtnHandler, winner }) => {\n\n    let winLoose, background = 'black', showH1 = (winner !== 0) ? 'appear' : 'disappear';\n    if (winner === 'X') {\n        background = 'green';\n        winLoose = 'YOU WON!';\n    } else if (winner === 'O') {\n        background = 'red';\n        winLoose = 'YOU LOST!'\n    } else if (winner === -1){\n        background = 'yellow';\n        winLoose = 'IT\\'S A TIE';\n    }    \n    return (\n        <div>\n            <h1 className='tc f1 white'>IMPOSSIBLE TIC-TAC-TOE</h1>\n            <h1 className={`white ${showH1}`}>{winLoose}</h1>\n            <table className='tc w-ns f2'>\n                <tbody >\n                    <tr>\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[0]} id={0} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[1]} id={1} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[2]} id={2} />\n                    </tr>\n                    <tr>\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[3]} id={3} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[4]} id={4} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[5]} id={5} />\n                    </tr>\n                    <tr><Cell bgcolor={background} clickedCell={onclickMethod} value={board[6]} id={6} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[7]} id={7} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[8]} id={8} />\n                    </tr>\n                </tbody>\n            </table>\n            <button className='f6 white br-pill ba bw2 ph3 pv2 ma2 ttu' onClick={replayBtnHandler} >Replay</button>\n        </div>\n    );\n};\nexport default Grid;","const COMPUTER = 'O';\nconst PLAYER = 'X';\n\nconst winningCombos = [\n    /*\n        0 | 1 | 2\n        ---------\n        3 | 4 | 5\n        ---------\n        6 | 7 | 8 \n    */\n\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\n\nexport const checkVictory = (board, player) => {\n    let coveredByPlayer = getCoveredBy(player, board);\n    return winningCombos.filter(line => line.every(cell => coveredByPlayer.includes(cell))).length > 0\n};\n\nconst getCoveredBy = (id, board) => {\n    return board.map((cell, index) => (cell === id) ? index : -1).filter(index => index !== -1);\n}\n\nconst getAvailable = (board) => {\n    return board.map((cell, index) => (cell !== PLAYER && cell !== COMPUTER) ? index : -1).filter(index => index !== -1);\n}\n\nexport const checkDraw = (board) => {\n    return board.filter(c => c === 0).length === 0;\n}\n\nexport const placeCircle = (board) => {\n    return minimax(board.slice(0), COMPUTER);\n}\n\n\n// Copied from\n// https://github.com/nicokratky/tictactoe-web\nfunction minimax(_board, player) {    \n    var av = getAvailable( _board);\n\n    if (checkVictory(_board, PLAYER)) {\n        return {\n            score: -10\n        };\n    } else if (checkVictory(_board, COMPUTER)) {\n        return {\n            score: 10\n        };\n    } else if (av.length === 0) {\n        return {\n            score: 0\n        };\n    }\n\n    let moves = [];\n    for (let i = 0; i < av.length; i++) {\n        var move = {\n            index: av[i]\n        };\n\n        _board[move.index] = player;\n\n        let mm;\n        if (player === COMPUTER)\n            mm = minimax(_board, PLAYER);\n        else\n            mm = minimax(_board, COMPUTER);\n\n        move.score = mm.score;\n        _board[av[i]] = move.index;\n        moves.push(move);\n    }\n\n    let bestMove, bestScore;\n    if (player === COMPUTER) {\n        bestScore = -99999;\n\n        for (let i = 0; i < moves.length; i++) {\n            if (moves[i].score > bestScore) {\n                bestScore = moves[i].score;\n                bestMove = i;\n            }\n        }\n    }\n    else {\n        bestScore = 99999;\n\n        for (var i = 0; i < moves.length; i++) {\n            if (moves[i].score < bestScore) {\n                bestScore = moves[i].score;\n                bestMove = i;\n            }\n        }\n    }\n\n    return moves[bestMove];\n}","import React from 'react';\nimport Grid from './Grid';\nimport 'tachyons';\nimport { placeCircle, checkVictory, checkDraw } from './tictac-ai';\n\nconst board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            _board: [...board],\n            _winner: 0\n        }\n\n    }\n    clickHandler = (event) => {\n        let selected = event.target.id;\n\n        // If it is not an empty cell, return\n        if (board[selected] !== 0) {\n            return;\n        }\n\n        // Updates the board with the corresponding cell\n        board[selected] = 'X';\n        if (checkVictory(board, 'X')) {\n            this.setState({\n                _winner: 'X',\n                _board: board\n            });\n            return;\n        }\n        // Now the computer plays\n        let index = placeCircle(board).index;\n        board[index] = 'O';\n        if (checkVictory(board, 'O')) {\n            this.setState({\n                _winner: 'O',\n                _board: board\n            });\n            return;\n        }\n\n        // Check for a draw\n        if (checkDraw(board)) {\n            this.setState({ _winner: -1 });\n        }\n\n        this.setState({ _board: board })\n    }\n\n    replay = (event) => {\n        for (let i = 0; i < board.length; i++) {\n            board[i] = 0;\n        }\n        let winner = 0;\n        this.setState({\n            _board: board,\n            _winner: winner\n        });\n    }\n    render() {\n\n        return (\n            <div className='tc'>\n                <Grid\n                    board={this.state._board}\n                    onclickMethod={this.clickHandler}\n                    replayBtnHandler={this.replay}\n                    winner={this.state._winner} />\n            </div >\n        );\n    }\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}