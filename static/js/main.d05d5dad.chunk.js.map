{"version":3,"sources":["tictac-ai.js","Cell.js","Grid.js","App.js","serviceWorker.js","index.js"],"names":["computerWinningCombos","playerWinningCombos","Cell","display","bgcolor","clickedCell","value","id","className","onClick","Grid","winLoose","board","onclickMethod","replayBtnHandler","winner","background","showH1","winningCombos","resetWinningCombos","Object","assign","checkVictory","player","winCombos","index","coveredByPlayer","getCoveredBy","filter","line","every","cell","includes","length","updateWinningCombos","checkDraw","c","getBestIndex","alreadyCovered","bestLine","bestIndex","combo","matchingCells","found","sum","indexOf","result","forEach","push","placeCircle","sort","App","clickHandler","event","selected","target","setState","replay","i","state","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d05d5dad.chunk.js","sourcesContent":["const COMPUTER = 2;\nconst PLAYER = 1;\n\nconst winningCombos = [\n    /*\n        0 | 1 | 2\n        ---------\n        3 | 4 | 5\n        ---------\n        6 | 7 | 8 \n    */\n\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n\n    [0, 4, 8],\n    [2, 4, 6]\n];\n\nexport let computerWinningCombos;\nexport let playerWinningCombos;\n\nexport const resetWinningCombos = () => {\n    computerWinningCombos = Object.assign([], winningCombos);\n    playerWinningCombos = Object.assign([], winningCombos);\n}\n\nexport const checkVictory = (board, player, winCombos, index) => {\n    let coveredByPlayer = getCoveredBy(player, board);\n    // If there is at least one line that is completely included in \"coveredByPlayer\" array, return true\n    if (winCombos.filter(line => line.every(cell => coveredByPlayer.includes(cell))).length > 0) {\n        return true;\n    }\n\n    if (player === PLAYER) {\n        computerWinningCombos = updateWinningCombos(computerWinningCombos, index);       \n    }\n    return false;\n\n\n};\n\nexport const checkDraw = (board) => {\n    return board.filter(c => c === 0).length === 0;\n}\n\nconst getBestIndex = (winCombos, alreadyCovered) => {\n    // Check if user is attempting a combo and decide the most dangerous line\n    let bestLine = [];\n    let bestIndex = -1;\n    // eslint-disable-next-line\n    for (const combo of winCombos) {\n        let matchingCells = 0, found = -1, sum = 0;\n        // If a combo, contains one cell of the coveredByPlayer, increment matchingCells, \n        // sum is used below to extract the missing index\n        // eslint-disable-next-line\n        for (const cell of alreadyCovered) {\n            found = combo.indexOf(cell);\n            if (found !== -1) {\n                matchingCells++;\n                sum += found;\n            }\n        }\n        if (matchingCells === 2) {\n            bestLine = combo;\n            bestIndex = 3 - sum; // If 0 and 1 are coveredByPlayer, we need to cover 3 - 1 = 2 index\n            break;\n        }\n    }\n    return typeof bestLine[bestIndex] === \"undefined\" ? -1 : bestLine[bestIndex];\n}\n\n/**\n * Returns an array containing all the indexes covered by ID sign\n * \n * @param {*} id  PLAYER = 1, COMPUTER = 2\n * @param {*} board \n */\nconst getCoveredBy = (id, board) => {\n    let result = [];\n    board.forEach((cell, index) => {\n        if (cell === id) {\n            result.push(index);\n        }\n    });\n    return result;\n}\n\nexport const updateWinningCombos = (winCombos, index) => {\n    return winCombos.filter(line => !line.includes(index));\n}\n/**\n * Need to go step by step:\n *  1 -> Check if we can win by placing just one circle\n *  2 -> If not, stop an enemy attempt\n *  3 -> If not, place the circle in the first free cell (center if available)\n * \n * @param board \n */\nexport const placeCircle = (board) => {\n    /*\n        1 -> Check if we can win!\n    */\n    let index = getBestIndex(computerWinningCombos, getCoveredBy(COMPUTER, board).sort());\n    if (index !== -1 && board[index] === 0) { // If there's a best index, place it\n        board[index] = 2;\n    } else {\n        /*\n            Check if it's time to stop an enemy line\n        */\n        index = getBestIndex(playerWinningCombos, getCoveredBy(PLAYER, board).sort());\n        if (index !== -1 && board[index] === 0) { // If there's a dangerous line, fix it\n            board[index] = 2;\n        } else if (board[4] === 0) { // If the center is free, occupy it\n            board[4] = 2;\n            index = 4;\n        } else { // Fill the first free spot\n            index = board.indexOf(0);\n            board[index] = 2;\n        }\n    }\n    playerWinningCombos = updateWinningCombos(playerWinningCombos, index);\n};\n","import React from 'react';\nimport './Cell.css'\n\nconst Cell = ({ bgcolor, clickedCell, value, id }) => {\n\n    let display;\n\n    if (value === 0) {\n        display = '   ';\n    } else if (value === 1) {\n        display = ' X ';\n    } else {\n        display = ' O ';\n    }\n    return (\n        <td className={`bg-${bgcolor} dim`} onClick={clickedCell} id={id}>{display}</td>\n    );\n};\nexport default Cell;","import React from 'react';\nimport Cell from './Cell';\nimport './Grid.css';\n\n\nconst Grid = ({ board, onclickMethod, replayBtnHandler, winner }) => {\n\n    let winLoose, background = 'black', showH1 = (winner !== 0) ? 'appear' : 'disappear';\n    if (winner === 1) {\n        background = 'green';\n        winLoose = 'YOU WON!';\n    } else if (winner === 2) {\n        background = 'red';\n        winLoose = 'YOU LOST!'\n    } else if (winner === 3){\n        background = 'yellow';\n        winLoose = 'IT\\'S A TIE';\n    }\n    return (\n        <div>\n            <h1 className='tc f1 white'>IMPOSSIBLE TIC-TAC-TOE</h1>\n            <h1 className={`white ${showH1}`}>{winLoose}</h1>\n            <table className='tc f2'>\n                <tbody >\n                    <tr>\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[0]} id={0} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[1]} id={1} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[2]} id={2} />\n                    </tr>\n                    <tr>\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[3]} id={3} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[4]} id={4} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[5]} id={5} />\n                    </tr>\n                    <tr><Cell bgcolor={background} clickedCell={onclickMethod} value={board[6]} id={6} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[7]} id={7} />\n                        <Cell bgcolor={background} clickedCell={onclickMethod} value={board[8]} id={8} />\n                    </tr>\n                </tbody>\n            </table>\n            <button className='f6 white br-pill ba bw2 ph3 pv2 ma2 ttu' onClick={replayBtnHandler} >Replay</button>\n        </div>\n    );\n};\nexport default Grid;","import React from 'react';\nimport Grid from './Grid';\nimport 'tachyons';\nimport { placeCircle, checkVictory, checkDraw, resetWinningCombos, computerWinningCombos, playerWinningCombos } from './tictac-ai';\n\nconst board = [0, 0, 0, 0, 0, 0, 0, 0, 0];\nclass App extends React.Component {\n\n    constructor() {\n        super();\n        this.state = {\n            board: board,\n            winner: 0\n        }\n        resetWinningCombos();\n    }\n    clickHandler = (event) => {\n        let selected = event.target.id;\n        if (board[selected] !== 0) {\n            return;\n        }\n        // Updates the board with the corresponding cell\n        board[selected] = 1;\n        if (checkVictory(board, 1, playerWinningCombos, event.target.id)) {\n            this.setState({ winner: 1 });\n            this.setState({ board: board });\n            return;\n        }\n\n        // Now the computer plays\n        placeCircle(board);\n        if (checkVictory(board, 2, computerWinningCombos, -1)) {\n            this.setState({ winner: 2 });\n            this.setState({ board: board });\n            return;\n\n        }\n\n        // Check for a draw\n        if (checkDraw(board)) {\n            this.setState({ winner: 3 });\n        }\n\n        this.setState({ board: board })\n    }\n\n    replay = (event) => {\n        for (let i = 0; i < board.length; i++) {\n            board[i] = 0;\n        }\n        resetWinningCombos();\n        let winner = 0;\n        this.setState({\n            board: board,\n            winner: winner\n        });\n    }\n    render() {\n\n        return (\n            <div className='tc'>\n                <Grid\n                    board={this.state.board}\n                    onclickMethod={this.clickHandler}\n                    replayBtnHandler={this.replay}\n                    winner={this.state.winner} />\n            </div >\n        );\n    }\n};\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}