{"version":3,"sources":["TextBox.js","greetings.js","App.js","serviceWorker.js","index.js"],"names":["TextBox","textInputChange","border","greeting","className","type","placeholder","onChange","greetings","App","isPalindrome","string","length","i","j","replace","onInputChange","event","setState","textInput","target","value","state","borderColor","showGreeting","this","toLowerCase","Math","floor","random","console","log","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OAqBeA,G,MAjBC,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,gBAAiBC,EAAuB,EAAvBA,OAAQC,EAAe,EAAfA,SACxC,OACI,yBAAKC,UAAU,MACX,yBAAKA,UAAU,aACX,kDACA,wBAAIA,UAAU,QAAd,gBAEJ,2BACIA,UAAS,kBAAaF,EAAb,QACTG,KAAK,OACLC,YAAY,cACZC,SAAUN,IACd,wBAAIG,UAAU,cAAcD,MChB3BK,G,MAAY,CACrB,cACA,mBACA,mBACA,0BACA,iBACA,aACA,UACA,WACA,4BC8CWC,E,YAjDX,aAAe,IAAD,8BACV,+CAMJC,aAAe,SAACC,GACZ,GAAIA,EAAOC,OAAS,EAChB,OAAO,EAGX,IAAK,IAAIC,EAAI,EAAGC,GADhBH,EAASA,EAAOI,QAAQ,KAAM,KACHH,OAAS,EAAGC,EAAIF,EAAOC,OAAQC,IAAMC,IAC5D,GAAIH,EAAOE,KAAOF,EAAOG,GACrB,OAAO,EAGf,OAAO,GAjBG,EAoBdE,cAAgB,SAACC,GACb,EAAKC,SAAS,CAAEC,UAAWF,EAAMG,OAAOC,SAnBxC,EAAKC,MAAQ,CACTH,UAAW,IAHL,E,sEA4BV,IAAII,EACAC,EAUJ,OATIC,KAAKf,aAAae,KAAKH,MAAMH,UAAUO,gBACvCH,EAAc,WACdC,EAAehB,EAAUmB,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkBrB,EAAUI,QACrEkB,QAAQC,IAAIP,IAGZD,EAAc,SAId,yBAAKnB,UAAU,cACX,kBAAC,EAAD,CACIH,gBAAiBwB,KAAKT,cACtBd,OAAQqB,EACRpB,SAAUqB,S,GA7CZQ,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.2dca0b14.chunk.js","sourcesContent":["import React from 'react';\nimport './TextBox.css'\n\n\nconst TextBox = ({ textInputChange, border, greeting }) => {\n    return (\n        <div className='f2'>\n            <div className='ma4 white'>\n                <h2>Do you think it's </h2>\n                <h1 className='grow'>palindrome?</h1>\n            </div>\n            <input\n                className={`br4 bw3 ${border} pa3`}\n                type='text'\n                placeholder='Type a word'\n                onChange={textInputChange} />\n            <h2 className='white grow'>{greeting}</h2>\n        </div>\n    );\n}\n\nexport default TextBox;","export const greetings = [\n    \"What a man!\",\n    \"You're sooo good\",\n    \"!!Unbelievable!!\",\n    \"I wasn't expecting that\",\n    \"That's unusual\",\n    \"TERRRRIFIC\",\n    \"**omg**\",\n    \"Awesome!\",\n    \"Did you invented that??\"\n];","import React from 'react';\nimport TextBox from './TextBox';\nimport 'tachyons';\nimport { greetings } from './greetings';\n\nclass App extends React.Component {\n    constructor() {\n        super();\n        this.state = {\n            textInput: '',\n        };\n    }\n\n    isPalindrome = (string) => {\n        if (string.length < 1) {\n            return false;\n        }\n        string = string.replace(/ /g, '');\n        for (let i = 0, j = string.length - 1; i < string.length; i++ , j--) {\n            if (string[i] !== string[j]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    onInputChange = (event) => {\n        this.setState({ textInput: event.target.value });\n    }\n\n    render() {\n\n        // When the page gets re-rendered, we check wether or not the word is palindrome\n        // and tell the TextBox component\n        let borderColor;\n        let showGreeting;\n        if (this.isPalindrome(this.state.textInput.toLowerCase())) {\n            borderColor = \"b--green\";\n            showGreeting = greetings[Math.floor(Math.random() * 100) % greetings.length];\n            console.log(showGreeting);\n\n        } else {\n            borderColor = \"b--red\";\n        }\n\n        return (\n            <div className='tc ma4 pa3'>\n                <TextBox\n                    textInputChange={this.onInputChange}\n                    border={borderColor}\n                    greeting={showGreeting} />\n            </div>\n        );\n    }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}